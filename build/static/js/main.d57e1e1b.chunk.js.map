{"version":3,"sources":["DataStreamer.ts","Graph.tsx","App.tsx","index.tsx"],"names":["DataStreamer","callback","request","XMLHttpRequest","open","API_URL","onload","status","JSON","parse","responseText","alert","send","Graph","table","React","createElement","elem","document","getElementsByTagName","window","perspective","worker","this","stock","top_ask_price","top_bid_price","timestamp","load","update","props","data","map","el","top_ask","price","top_bid","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","src_Graph_0","_this2","getData","serverResponds","setState","concat","toConsumableArray","_this3","className","onClick","getDataFromServer","renderGraph","ReactDOM","render","src_App_0","getElementById"],"mappings":"6OAeMA,uGAQWC,GACb,IAAMC,EAAU,IAAIC,eACpBD,EAAQE,KAAK,MAAOJ,EAAaK,SAAS,GAE1CH,EAAQI,OAAS,WACQ,MAAnBJ,EAAQK,OACVN,EAASO,KAAKC,MAAMP,EAAQQ,eAE5BC,MAAO,mBAIXT,EAAQU,gBApBNZ,EAEGK,QAAkB,mCAsBZL,QCiCAa,oNA9CbC,qFAGE,OAAOC,IAAMC,cAAc,kEAK3B,IAAMC,EAAiCC,SAASC,qBAAqB,sBAAsB,GASvFC,OAAOC,aAAeD,OAAOC,YAAYC,WAC3CC,KAAKT,MAAQM,OAAOC,YAAYC,SAASR,MAR5B,CACbU,MAAO,SACPC,cAAe,QACfC,cAAe,QACfC,UAAW,UAMTJ,KAAKT,OAIPG,EAAKW,KAAKL,KAAKT,oDAMbS,KAAKT,OAGPS,KAAKT,MAAMe,OAAON,KAAKO,MAAMC,KAAKC,IAAI,SAACC,GAErC,MAAO,CACLT,MAAOS,EAAGT,MACVC,cAAeQ,EAAGC,SAAWD,EAAGC,QAAQC,OAAS,EACjDT,cAAeO,EAAGG,SAAWH,EAAGG,QAAQD,OAAS,EACjDR,UAAWM,EAAGN,qBAzCJU,cCiDLC,qBAxDb,SAAAA,EAAYR,GAAW,IAAAS,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAjB,KAAAe,IACrBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAjB,KAAAiB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAArB,KAAMO,KAEDe,MAAQ,CAGXd,KAAM,IANaQ,6EAcrB,OAAQO,EAAAC,EAAA/B,cAACgC,EAAD,CAAOjB,KAAMR,KAAKsB,MAAMd,mDAMd,IAAAkB,EAAA1B,KAClBvB,EAAakD,QAAQ,SAACC,GAGpBF,EAAKG,SAAS,CAAErB,KAAI,GAAAsB,OAAAb,OAAAc,EAAA,EAAAd,CAAMS,EAAKJ,MAAMd,MAAjBS,OAAAc,EAAA,EAAAd,CAA0BW,yCAOzC,IAAAI,EAAAhC,KACP,OACEuB,EAAAC,EAAA/B,cAAA,OAAKwC,UAAU,OACbV,EAAAC,EAAA/B,cAAA,UAAQwC,UAAU,cAAlB,0BAGAV,EAAAC,EAAA/B,cAAA,OAAKwC,UAAU,eACbV,EAAAC,EAAA/B,cAAA,UAAQwC,UAAU,gCAMhBC,QAAS,WAAOF,EAAKG,sBANvB,wBASAZ,EAAAC,EAAA/B,cAAA,OAAKwC,UAAU,SACZjC,KAAKoC,wBAjDAtB,0BCHlBuB,IAASC,OAAOf,EAAAC,EAAA/B,cAAC8C,EAAD,MAAS5C,SAAS6C,eAAe","file":"static/js/main.d57e1e1b.chunk.js","sourcesContent":["export interface Order {\r\n  price: Number,\r\n  size: Number,\r\n}\r\n/**\r\n * The datafeed server returns an array of ServerRespond with 2 stocks.\r\n * We do not have to manipulate the ServerRespond for the purpose of this task.\r\n */\r\nexport interface ServerRespond {\r\n  stock: string,\r\n  top_bid: Order,\r\n  top_ask: Order,\r\n  timestamp: Date,\r\n}\r\n\r\nclass DataStreamer {\r\n  // The url where datafeed server is listening\r\n  static API_URL: string = 'http://localhost:8080/query?id=1';\r\n\r\n  /**\r\n   * Send request to the datafeed server and executes callback function on success\r\n   * @param callback callback function that takes JSON object as its argument\r\n   */\r\n  static getData(callback: (data: ServerRespond[]) => void): void {\r\n    const request = new XMLHttpRequest();\r\n    request.open('GET', DataStreamer.API_URL, false);\r\n\r\n    request.onload = () => {\r\n      if (request.status === 200) {\r\n        callback(JSON.parse(request.responseText));\r\n      } else {\r\n        alert ('Request failed');\r\n      }\r\n    }\r\n\r\n    request.send();\r\n  }\r\n}\r\n\r\nexport default DataStreamer;","import React, { Component } from 'react';\r\nimport { Table } from '@jpmorganchase/perspective';\r\nimport { ServerRespond } from './DataStreamer';\r\nimport './Graph.css';\r\n\r\n/**\r\n * Props declaration for <Graph />\r\n */\r\ninterface IProps {\r\n  data: ServerRespond[],\r\n}\r\n\r\n/**\r\n * Perspective library adds load to HTMLElement prototype.\r\n * This interface acts as a wrapper for Typescript compiler.\r\n */\r\ninterface PerspectiveViewerElement {\r\n  load: (table: Table) => void,\r\n}\r\n\r\n/**\r\n * React component that renders Perspective based on data\r\n * parsed from its parent through data property.\r\n */\r\nclass Graph extends Component<IProps, {}> {\r\n  // Perspective table\r\n  table: Table | undefined;\r\n\r\n  render() {\r\n    return React.createElement('perspective-viewer');\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Get element to attach the table from the DOM.\r\n    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;\r\n\r\n    const schema = {\r\n      stock: 'string',\r\n      top_ask_price: 'float',\r\n      top_bid_price: 'float',\r\n      timestamp: 'date',\r\n    };\r\n\r\n    if (window.perspective && window.perspective.worker()) {\r\n      this.table = window.perspective.worker().table(schema);\r\n    }\r\n    if (this.table) {\r\n      // Load the `table` in the `<perspective-viewer>` DOM reference.\r\n\r\n      // Add more Perspective configurations here.\r\n      elem.load(this.table);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // Everytime the data props is updated, insert the data into Perspective table\r\n    if (this.table) {\r\n      // As part of the task, you need to fix the way we update the data props to\r\n      // avoid inserting duplicated entries into Perspective table again.\r\n      this.table.update(this.props.data.map((el: any) => {\r\n        // Format the data from ServerRespond to the schema\r\n        return {\r\n          stock: el.stock,\r\n          top_ask_price: el.top_ask && el.top_ask.price || 0,\r\n          top_bid_price: el.top_bid && el.top_bid.price || 0,\r\n          timestamp: el.timestamp,\r\n        };\r\n      }));\r\n    }\r\n  }\r\n}\r\n\r\nexport default Graph;\r\n","import React, { Component } from 'react';\r\nimport DataStreamer, { ServerRespond } from './DataStreamer';\r\nimport Graph from './Graph';\r\nimport './App.css';\r\n\r\n/**\r\n * State declaration for <App />\r\n */\r\ninterface IState {\r\n  data: ServerRespond[],\r\n}\r\n\r\n/**\r\n * The parent element of the react app.\r\n * It renders title, button and Graph react element.\r\n */\r\nclass App extends Component<{}, IState> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      // data saves the server responds.\r\n      // We use this state to parse data down to the child element (Graph) as element property\r\n      data: [],\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Render Graph react component with state.data parse as property data\r\n   */\r\n  renderGraph() {\r\n    return (<Graph data={this.state.data}/>)\r\n  }\r\n\r\n  /**\r\n   * Get new data from server and update the state with the new data\r\n   */\r\n  getDataFromServer() {\r\n    DataStreamer.getData((serverResponds: ServerRespond[]) => {\r\n      // Update the state by creating a new array of data that consists of\r\n      // Previous data in the state and the new data from server\r\n      this.setState({ data: [...this.state.data, ...serverResponds] });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Render the App react component\r\n   */\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          Bank & Merge Co Task 2\r\n        </header>\r\n        <div className=\"App-content\">\r\n          <button className=\"btn btn-primary Stream-button\"\r\n            // when button is click, our react app tries to request\r\n            // new data from the server.\r\n            // As part of your task, update the getDataFromServer() function\r\n            // to keep requesting the data every 100ms until the app is closed\r\n            // or the server does not return anymore data.\r\n            onClick={() => {this.getDataFromServer()}}>\r\n            Start Streaming Data\r\n          </button>\r\n          <div className=\"Graph\">\r\n            {this.renderGraph()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\ndeclare global {\r\n  interface Window { perspective: any; }\r\n}\r\n\r\n/**\r\n * React App attaches the DOM to the DOM element #root in public/index.html\r\n */\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}